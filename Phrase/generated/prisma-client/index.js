/**
 * @flow
 */

// Code generated by Prisma (prisma@1.19.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import type { GraphQLSchema, DocumentNode } from "graphql";
import type { IResolvers } from "graphql-tools/dist/Interfaces";
import type { BasePrismaOptions as BPOType, Options } from "prisma-client-lib";
import { makePrismaClientClass } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T> = $Shape<T>;

export interface Exists {
  Phrase(where?: PhraseWhereInput): Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

interface PrismaInterface {
  $exists: Exists;
  $graphql: <T: any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  phrase: (where: PhraseWhereUniqueInput) => Phrase;
  phrases: (args?: {
    where?: PhraseWhereInput,
    orderBy?: PhraseOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<PhraseNode>;
  phrasesConnection: (args?: {
    where?: PhraseWhereInput,
    orderBy?: PhraseOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => PhraseConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPhrase: (data: PhraseCreateInput) => Phrase;
  updatePhrase: (args: {
    data: PhraseUpdateInput,
    where: PhraseWhereUniqueInput
  }) => Phrase;
  updateManyPhrases: (args: {
    data: PhraseUpdateInput,
    where?: PhraseWhereInput
  }) => BatchPayload;
  upsertPhrase: (args: {
    where: PhraseWhereUniqueInput,
    create: PhraseCreateInput,
    update: PhraseUpdateInput
  }) => Phrase;
  deletePhrase: (where: PhraseWhereUniqueInput) => Phrase;
  deleteManyPhrases: (where?: PhraseWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  phrase: (
    where?: PhraseSubscriptionWhereInput
  ) => PhraseSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new(options?: BPOType): T;
}

/**
 * Types
 */

export type PhraseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phrase_ASC"
  | "phrase_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PhraseCreateInput {
  phrase: String;
  userId: ID_Input;
}

export interface PhraseUpdateInput {
  phrase?: String;
  userId?: ID_Input;
}

export interface PhraseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[];
  id_not_in?: ID_Input[];
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  phrase?: String;
  phrase_not?: String;
  phrase_in?: String[];
  phrase_not_in?: String[];
  phrase_lt?: String;
  phrase_lte?: String;
  phrase_gt?: String;
  phrase_gte?: String;
  phrase_contains?: String;
  phrase_not_contains?: String;
  phrase_starts_with?: String;
  phrase_not_starts_with?: String;
  phrase_ends_with?: String;
  phrase_not_ends_with?: String;
  userId?: ID_Input;
  userId_not?: ID_Input;
  userId_in?: ID_Input[];
  userId_not_in?: ID_Input[];
  userId_lt?: ID_Input;
  userId_lte?: ID_Input;
  userId_gt?: ID_Input;
  userId_gte?: ID_Input;
  userId_contains?: ID_Input;
  userId_not_contains?: ID_Input;
  userId_starts_with?: ID_Input;
  userId_not_starts_with?: ID_Input;
  userId_ends_with?: ID_Input;
  userId_not_ends_with?: ID_Input;
  AND?: PhraseWhereInput[];
  OR?: PhraseWhereInput[];
  NOT?: PhraseWhereInput[];
}

export interface PhraseSubscriptionWhereInput {
  mutation_in?: MutationType[];
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[];
  updatedFields_contains_some?: String[];
  node?: PhraseWhereInput;
  AND?: PhraseSubscriptionWhereInput[];
  OR?: PhraseSubscriptionWhereInput[];
  NOT?: PhraseSubscriptionWhereInput[];
}

export type PhraseWhereUniqueInput = AtLeastOne<{
  id: ID_Input
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface PhraseEdgeNode {
  cursor: String;
}

export interface PhraseEdge extends Promise<PhraseEdgeNode>, Fragmentable {
  node: <T: Phrase>() => T;
  cursor: () => Promise<String>;
}

export interface PhraseEdgeSubscription
  extends Promise<AsyncIterator<PhraseEdgeNode>>, Fragmentable {
  node: <T: PhraseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>, Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PhrasePreviousValuesNode {
  id: ID_Output;
  phrase: String;
  userId: ID_Output;
}

export interface PhrasePreviousValues
  extends Promise<PhrasePreviousValuesNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  phrase: () => Promise<String>;
  userId: () => Promise<ID_Output>;
}

export interface PhrasePreviousValuesSubscription
  extends Promise<AsyncIterator<PhrasePreviousValuesNode>>, Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phrase: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface PhraseSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PhraseSubscriptionPayload
  extends Promise<PhraseSubscriptionPayloadNode>, Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: Phrase>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: PhrasePreviousValues>() => T;
}

export interface PhraseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhraseSubscriptionPayloadNode>>, Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: PhraseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: PhrasePreviousValuesSubscription>() => T;
}

export interface PhraseNode {
  id: ID_Output;
  phrase: String;
  userId: ID_Output;
}

export interface Phrase extends Promise<PhraseNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  phrase: () => Promise<String>;
  userId: () => Promise<ID_Output>;
}

export interface PhraseSubscription
  extends Promise<AsyncIterator<PhraseNode>>, Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phrase: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface PhraseConnectionNode {}

export interface PhraseConnection
  extends Promise<PhraseConnectionNode>, Fragmentable {
  pageInfo: <T: PageInfo>() => T;
  edges: <T: FragmentableArray<PhraseEdgeNode>>() => T;
  aggregate: <T: AggregatePhrase>() => T;
}

export interface PhraseConnectionSubscription
  extends Promise<AsyncIterator<PhraseConnectionNode>>, Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<PhraseEdgeSubscription>>>() => T;
  aggregate: <T: AggregatePhraseSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>, Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePhraseNode {
  count: Int;
}

export interface AggregatePhrase
  extends Promise<AggregatePhraseNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhraseSubscription
  extends Promise<AsyncIterator<AggregatePhraseNode>>, Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<PrismaInterface>>(
  { typeDefs, endpoint: `https://us1.prisma.sh/yeuem1vannam/Phrase/dev` }
);
export const prisma = new Prisma();
